{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eirfa\\\\Desktop\\\\My Projects\\\\Patientor\\\\frontend\\\\src\\\\components\\\\PatientPage\\\\Entry.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst assertNever = value => {\n  throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\n};\nconst Entries = _ref => {\n  var _entry$diagnosisCodes, _entry$diagnosisCodes2, _entry$diagnosisCodes3;\n  let {\n    entry,\n    diagnoses\n  } = _ref;\n  switch (entry.type) {\n    case \"Hospital\":\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: entry.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", entry.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Specialist: \", entry.specialist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Discharge date: \", entry.discharge.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Discharge criteria: \", entry.discharge.criteria]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 29\n          }, this), (_entry$diagnosisCodes = entry.diagnosisCodes) === null || _entry$diagnosisCodes === void 0 ? void 0 : _entry$diagnosisCodes.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [c, \" - \", diagnoses.map(d => d.code === c ? d.name : null)]\n          }, c, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this);\n    case \"OccupationalHealthcare\":\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: entry.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", entry.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Specialist: \", entry.specialist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Employer name: \", entry.employerName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), entry.sickLeave ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sick leave: \", entry.sickLeave.startDate, \" - \", entry.sickLeave.endDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this) : null, (_entry$diagnosisCodes2 = entry.diagnosisCodes) === null || _entry$diagnosisCodes2 === void 0 ? void 0 : _entry$diagnosisCodes2.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [c, \" - \", diagnoses.map(d => d.code === c ? d.name : null)]\n          }, c, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this);\n    case \"HealthCheck\":\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: entry.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", entry.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Specialist: \", entry.specialist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this), (_entry$diagnosisCodes3 = entry.diagnosisCodes) === null || _entry$diagnosisCodes3 === void 0 ? void 0 : _entry$diagnosisCodes3.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [c, \" - \", diagnoses.map(d => d.code === c ? d.name : null)]\n          }, c, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    default:\n      return assertNever(entry);\n  }\n};\n_c = Entries;\nexport default Entries;\nvar _c;\n$RefreshReg$(_c, \"Entries\");","map":{"version":3,"names":["assertNever","value","Error","JSON","stringify","Entries","entry","diagnoses","type","date","description","specialist","discharge","criteria","diagnosisCodes","map","c","d","code","name","employerName","sickLeave","startDate","endDate"],"sources":["C:/Users/eirfa/Desktop/My Projects/Patientor/frontend/src/components/PatientPage/Entry.tsx"],"sourcesContent":["import { Diagnosis, Entry } from \"../../types\"\r\n\r\ninterface Props {\r\n    entry: Entry\r\n    diagnoses: Diagnosis[]\r\n}\r\n\r\nconst assertNever = (value: never): never => {\r\n    throw new Error(\r\n      `Unhandled discriminated union member: ${JSON.stringify(value)}`\r\n    );\r\n};\r\n\r\nconst Entries = ( { entry, diagnoses }: Props ) => {\r\n    switch (entry.type) {\r\n        case \"Hospital\":\r\n            return(\r\n                <div>\r\n                        <fieldset>\r\n                            <legend>{entry.date}</legend>\r\n                            <p>Description: {entry.description}</p>\r\n                            <p>Specialist: {entry.specialist}</p>\r\n                            <p>Discharge date: {entry.discharge.date}</p>\r\n                            <p>Discharge criteria: {entry.discharge.criteria}</p>\r\n                            {entry.diagnosisCodes?.map(c => \r\n                                <li key={c}>\r\n                                    {c} - {diagnoses.map(d => d.code === c ? d.name : null)}\r\n                                </li>)}\r\n                        </fieldset>\r\n                </div>\r\n            );\r\n        case \"OccupationalHealthcare\":\r\n            return(\r\n                <div>\r\n                        <fieldset>\r\n                            <legend>{entry.date}</legend>\r\n                            <p>Description: {entry.description}</p>\r\n                            <p>Specialist: {entry.specialist}</p>\r\n                            <p>Employer name: {entry.employerName}</p>\r\n                            {entry.sickLeave ? \r\n                                <p>Sick leave: {entry.sickLeave.startDate} - {entry.sickLeave.endDate}</p> :\r\n                                null\r\n                            }\r\n                            {entry.diagnosisCodes?.map(c => \r\n                                <li key={c}>\r\n                                    {c} - {diagnoses.map(d => d.code === c ? d.name : null)}\r\n                                </li>)}\r\n                        </fieldset>\r\n                </div>\r\n            );\r\n        case \"HealthCheck\":\r\n            return(\r\n                <div>\r\n                        <fieldset>\r\n                            <legend>{entry.date}</legend>\r\n                            <p>Description: {entry.description}</p>\r\n                            <p>Specialist: {entry.specialist}</p>\r\n                            {entry.diagnosisCodes?.map(c => \r\n                                <li key={c}>\r\n                                    {c} - {diagnoses.map(d => d.code === c ? d.name : null)}\r\n                                </li>)}\r\n                        </fieldset>\r\n                </div>\r\n            );\r\n        default:\r\n            return assertNever(entry)\r\n    }\r\n};\r\n\r\nexport default Entries"],"mappings":";;AAOA,MAAMA,WAAW,GAAIC,KAAY,IAAY;EACzC,MAAM,IAAIC,KAAK,CACZ,yCAAwCC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAE,EAAC,CACjE;AACL,CAAC;AAED,MAAMI,OAAO,GAAG,QAAmC;EAAA;EAAA,IAAjC;IAAEC,KAAK;IAAEC;EAAiB,CAAC;EACzC,QAAQD,KAAK,CAACE,IAAI;IACd,KAAK,UAAU;MACX,oBACI;QAAA,uBACQ;UAAA,wBACI;YAAA,UAASF,KAAK,CAACG;UAAI;YAAA;YAAA;YAAA;UAAA,QAAU,eAC7B;YAAA,WAAG,eAAa,EAACH,KAAK,CAACI,WAAW;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eACvC;YAAA,WAAG,cAAY,EAACJ,KAAK,CAACK,UAAU;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eACrC;YAAA,WAAG,kBAAgB,EAACL,KAAK,CAACM,SAAS,CAACH,IAAI;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eAC7C;YAAA,WAAG,sBAAoB,EAACH,KAAK,CAACM,SAAS,CAACC,QAAQ;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,2BACpDP,KAAK,CAACQ,cAAc,0DAApB,sBAAsBC,GAAG,CAACC,CAAC,iBACxB;YAAA,WACKA,CAAC,EAAC,KAAG,EAACT,SAAS,CAACQ,GAAG,CAACE,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKF,CAAC,GAAGC,CAAC,CAACE,IAAI,GAAG,IAAI,CAAC;UAAA,GADlDH,CAAC;YAAA;YAAA;YAAA;UAAA,QAEL,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;MACH;QAAA;QAAA;QAAA;MAAA,QACb;IAEd,KAAK,wBAAwB;MACzB,oBACI;QAAA,uBACQ;UAAA,wBACI;YAAA,UAASV,KAAK,CAACG;UAAI;YAAA;YAAA;YAAA;UAAA,QAAU,eAC7B;YAAA,WAAG,eAAa,EAACH,KAAK,CAACI,WAAW;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eACvC;YAAA,WAAG,cAAY,EAACJ,KAAK,CAACK,UAAU;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eACrC;YAAA,WAAG,iBAAe,EAACL,KAAK,CAACc,YAAY;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,EACzCd,KAAK,CAACe,SAAS,gBACZ;YAAA,WAAG,cAAY,EAACf,KAAK,CAACe,SAAS,CAACC,SAAS,EAAC,KAAG,EAAChB,KAAK,CAACe,SAAS,CAACE,OAAO;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,GAC1E,IAAI,4BAEPjB,KAAK,CAACQ,cAAc,2DAApB,uBAAsBC,GAAG,CAACC,CAAC,iBACxB;YAAA,WACKA,CAAC,EAAC,KAAG,EAACT,SAAS,CAACQ,GAAG,CAACE,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKF,CAAC,GAAGC,CAAC,CAACE,IAAI,GAAG,IAAI,CAAC;UAAA,GADlDH,CAAC;YAAA;YAAA;YAAA;UAAA,QAEL,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;MACH;QAAA;QAAA;QAAA;MAAA,QACb;IAEd,KAAK,aAAa;MACd,oBACI;QAAA,uBACQ;UAAA,wBACI;YAAA,UAASV,KAAK,CAACG;UAAI;YAAA;YAAA;YAAA;UAAA,QAAU,eAC7B;YAAA,WAAG,eAAa,EAACH,KAAK,CAACI,WAAW;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,eACvC;YAAA,WAAG,cAAY,EAACJ,KAAK,CAACK,UAAU;UAAA;YAAA;YAAA;YAAA;UAAA,QAAK,4BACpCL,KAAK,CAACQ,cAAc,2DAApB,uBAAsBC,GAAG,CAACC,CAAC,iBACxB;YAAA,WACKA,CAAC,EAAC,KAAG,EAACT,SAAS,CAACQ,GAAG,CAACE,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKF,CAAC,GAAGC,CAAC,CAACE,IAAI,GAAG,IAAI,CAAC;UAAA,GADlDH,CAAC;YAAA;YAAA;YAAA;UAAA,QAEL,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;MACH;QAAA;QAAA;QAAA;MAAA,QACb;IAEd;MACI,OAAOhB,WAAW,CAACM,KAAK,CAAC;EAAA;AAErC,CAAC;AAAC,KAtDID,OAAO;AAwDb,eAAeA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}